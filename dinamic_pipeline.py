# -*- coding: utf-8 -*-
"""Dinamic pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRMwnh6O9nxNWo3o17b06SrQwfILeGLr

Mario Castro <mariocastro.pva@gmail.com>

30-12-2021
"""
from pprint import pprint

from functional_pipeline import pipeline

from file_manager import get_data, get_criteria, put_data

from filters_lib import CampaignCriteria


def main(function_list, data, param_list):
    # instancia de la clase contenedora de funciones
    function_selector = CampaignCriteria()

    # se genera dinamicamente la lista de funciones a ejecutar,
    # buscandolas en la clase CampaignCriteria segun la lista de funciones
    # suministrada
    pipe = [
        function_selector.criteria_selector(type, **param_list)
        for type in function_list
    ]

    # se ejecuta el pipeline
    result = list(pipeline(data, pipe))

    put_data(result)

    # pprint(result)

    print("\nNumber of resulting items: ", len(result))


if __name__ == "__main__":

    criteria_function_list_clean = []
    param_list = {}
    criteria_function_list_raw = get_criteria()

    # se construye la lista de funciones o filtros a ejecutar
    # y el objeto con los parametros a aplicar en cada uno
    for section in criteria_function_list_raw["applied_filters"]:
        for function, params in section.items():
            if function != "filter_name" and params is not None:
                criteria_function_list_clean.append(str(function))
                param_list.update(section)

    # arreglo de data a procesar
    data = get_data()
    main(criteria_function_list_clean, data, param_list)
