# -*- coding: utf-8 -*-
"""Dinamic pipeline.ipynb

Automatically generated by Colaboratory.

Based on file located at
    https://colab.research.google.com/drive/1XRMwnh6O9nxNWo3o17b06SrQwfILeGLr

Mario Castro <mariocastro.pva@gmail.com>

30-12-2021
"""
from pprint import pprint

from collections import ChainMap

from functional_pipeline import pipeline

from libs.file_manager import get_criteria, get_data_file, put_data

from libs.filters_lib import CampaignCriteria

from repository.queries import CriteriaRepo


def main(function_list, data, param_list):
    # instancia de la clase contenedora de funciones
    function_selector = CampaignCriteria()

    # se genera dinamicamente la lista de funciones a ejecutar,
    # buscandolas en la clase CampaignCriteria segun la lista de funciones
    # suministrada
    pipe = [
        function_selector.criteria_selector(type, **param_list)
        for type in function_list
    ]

    # se ejecuta el pipeline

    result = list(pipeline(data, pipe))

    # Se escribe el resultado a disco
    put_data(result)

    # # Resultado por pantalla
    # pprint(result)

    # Conteo de customers que cumplen con los criterios de filtrado
    print("\nNumber of resulting customers: ", len(result))


if __name__ == "__main__":

    # Se reciben los criterios de filtrado
    criteria_function_list_raw = get_criteria()

    # Lista de funciones o filtros a ejecutar (sin aplanar)
    functions = [item for item in criteria_function_list_raw.values()]

    # Secciones (Profile, Accommodation, etc.)
    sections = [
        item_key
        for item_key, item_value in criteria_function_list_raw.items()
        if item_value
    ]

    flatten_filters = ChainMap(*functions)

    # Lista de funciones o filtros a ejecutar (aplanada)
    criteria_function_list_clean = [
        criteria_key
        for criteria_key, criteria_value in flatten_filters.items()
        if criteria_value
    ]

    # Objeto con los parametros a aplicar en cada uno
    param_dict = dict(flatten_filters)

    # arreglo de data a procesar
    customer_id_list = get_data_file()

    # Query para obtener customers segun lista de Id's
    customers = [
        customer for customer in CriteriaRepo().get_customer_from_id(customer_id_list)
    ]

    print(sections, criteria_function_list_clean, param_dict, sep="\n")

    main(criteria_function_list_clean, customers, param_dict)
